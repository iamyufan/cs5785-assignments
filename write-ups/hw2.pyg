M_values = []
F1_scores = []

# Find the M with the highest F1 score
for M in range(1, 20, 1):
    # CountVectorizer with min_df=M
    vectorizer = CountVectorizer(binary=True, min_df=M, ngram_range=(2, 2))
    X_train_bow_matrix = vectorizer.fit_transform(X_train['text']).toarray()

    # Initialize and train the model
    model = LogisticRegression(penalty="l2", max_iter=1000)
    model.fit(X_train_bow, y_train)

    # Predict the labels of the validation set
    y_pred = model.predict(vectorizer.transform(X_dev['text']))
    score = f1_score(y_dev, y_pred)

    M_values.append(M)
    F1_scores.append(score)

plt.figure(figsize=(10, 6))
plt.plot(M_values, F1_scores, marker='o', linestyle='-', color='b')
plt.title("F1 Score vs. M for Logistic Regression (L2 Regularization)")
plt.xlabel("M (min_df)")
plt.ylabel("F1 Score")
plt.savefig(os.path.join(IMG_PATH, "f1_score_vs_m_ngram.png"))
